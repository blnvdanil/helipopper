import { ElementRef, EventEmitter, Injector, NgZone, ViewContainerRef, AfterViewInit, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { ViewService, Content } from '@ngneat/overview';
import { NgChanges, TippyConfig, TippyProps } from './tippy.types';
import * as i0 from "@angular/core";
export declare class TippyDirective implements OnChanges, AfterViewInit, OnDestroy, OnInit {
    private platformId;
    private globalConfig;
    private injector;
    private viewService;
    private vcr;
    private zone;
    private hostRef;
    appendTo: TippyProps['appendTo'];
    delay: TippyProps['delay'];
    duration: TippyProps['duration'];
    hideOnClick: TippyProps['hideOnClick'];
    interactive: TippyProps['interactive'];
    interactiveBorder: TippyProps['interactiveBorder'];
    maxWidth: TippyProps['maxWidth'];
    offset: TippyProps['offset'];
    placement: TippyProps['placement'];
    popperOptions: TippyProps['popperOptions'];
    showOnCreate: TippyProps['showOnCreate'];
    trigger: TippyProps['trigger'];
    triggerTarget: TippyProps['triggerTarget'];
    zIndex: TippyProps['zIndex'];
    lazy: boolean;
    variation: string;
    isEnabled: boolean;
    className: string | string[];
    onlyTextOverflow: boolean;
    data: any;
    useHostWidth: boolean;
    hideOnEscape: boolean;
    content: Content;
    customHost: HTMLElement;
    visible: EventEmitter<boolean>;
    isVisible: boolean;
    changed: EventEmitter<any>;
    private instance;
    private viewRef;
    private destroyed;
    private props;
    private enabled;
    private variationDefined;
    private viewOptions$;
    constructor(platformId: string, globalConfig: TippyConfig, injector: Injector, viewService: ViewService, vcr: ViewContainerRef, zone: NgZone, hostRef: ElementRef);
    ngOnChanges(changes: NgChanges<TippyDirective>): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    destroyView(): void;
    show(): void;
    hide(): void;
    enable(): void;
    disable(): void;
    private setProps;
    private setStatus;
    private get host();
    private get hostWidth();
    private createInstance;
    private resolveContent;
    private handleContextMenu;
    private handleEscapeButton;
    private pressButton$;
    private checkOverflow;
    private listenToHostResize;
    static ɵfac: i0.ɵɵFactoryDeclaration<TippyDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TippyDirective, "[tippy]", ["tippy"], { "appendTo": "appendTo"; "delay": "delay"; "duration": "duration"; "hideOnClick": "hideOnClick"; "interactive": "interactive"; "interactiveBorder": "interactiveBorder"; "maxWidth": "maxWidth"; "offset": "offset"; "placement": "placement"; "popperOptions": "popperOptions"; "showOnCreate": "showOnCreate"; "trigger": "trigger"; "triggerTarget": "triggerTarget"; "zIndex": "zIndex"; "lazy": "lazy"; "variation": "variation"; "isEnabled": "isEnabled"; "className": "className"; "onlyTextOverflow": "onlyTextOverflow"; "data": "data"; "useHostWidth": "useHostWidth"; "hideOnEscape": "hideOnEscape"; "content": "tippy"; "customHost": "tippyHost"; "isVisible": "isVisible"; }, { "visible": "visible"; "changed": "changed"; }, never>;
}
//# sourceMappingURL=tippy.directive.d.ts.map